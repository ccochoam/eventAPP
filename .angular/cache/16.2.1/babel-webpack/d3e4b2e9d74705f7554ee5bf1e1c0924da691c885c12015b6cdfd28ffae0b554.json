{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let EventListComponent = class EventListComponent {\n  constructor(eventService) {\n    this.eventService = eventService;\n    this.events = []; // Suponiendo que tienes un arreglo de eventos\n    this.typeFilter = '';\n  }\n  ngOnInit() {\n    this.getEvents(); // Llama a la función para cargar eventos al inicializar el componente\n  }\n\n  getEvents() {\n    this.eventService.getEvents().subscribe(data => {\n      this.events = data; // Asigna los datos recibidos a la propiedad events\n    });\n  }\n\n  getTipoEvento(tipo) {\n    switch (tipo) {\n      case 1:\n        return \"Venta\";\n      case 2:\n        return \"Compra\";\n      default:\n        return \"Otro\";\n    }\n  }\n  filterEvents() {\n    // Aplica el filtro en función del valor de tipoFiltro\n    if (this.typeFilter) {\n      this.events = this.events.filter(event => event.tipo.includes(this.typeFilter));\n    } else {\n      // Si el campo de filtro está vacío, restaura la lista completa\n      this.getEvents();\n    }\n  }\n};\nEventListComponent = __decorate([Component({\n  selector: 'app-event-list',\n  templateUrl: './event-list.component.html',\n  styleUrls: ['./event-list.component.css']\n})], EventListComponent);","map":{"version":3,"names":["Component","EventListComponent","constructor","eventService","events","typeFilter","ngOnInit","getEvents","subscribe","data","getTipoEvento","tipo","filterEvents","filter","event","includes","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\proyectos\\finaktiva\\LogApp\\src\\app\\event-list\\event-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { EventService } from 'src/app/event.service'\n\n@Component({\n  selector: 'app-event-list',\n  templateUrl: './event-list.component.html',\n  styleUrls: ['./event-list.component.css']\n})\nexport class EventListComponent implements OnInit {\n  events: any[] = []; // Suponiendo que tienes un arreglo de eventos\n  typeFilter: string = '';\n\n  constructor(private eventService: EventService) {}\n\n  ngOnInit(): void {\n    this.getEvents(); // Llama a la función para cargar eventos al inicializar el componente\n  }\n\n  getEvents(): void {\n    this.eventService.getEvents().subscribe((data) => {\n      this.events = data; // Asigna los datos recibidos a la propiedad events\n    });\n  }\n  getTipoEvento(tipo: number): string {\n    switch (tipo) {\n      case 1:\n        return \"Venta\";\n      case 2:\n        return \"Compra\";\n      default:\n        return \"Otro\";\n    }\n  }\n  filterEvents(): void {\n    // Aplica el filtro en función del valor de tipoFiltro\n    if (this.typeFilter) {\n      this.events = this.events.filter((event) =>\n        event.tipo.includes(this.typeFilter)\n      );\n    } else {\n      // Si el campo de filtro está vacío, restaura la lista completa\n      this.getEvents();\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAI7BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAHhC,KAAAC,MAAM,GAAU,EAAE,CAAC,CAAC;IACpB,KAAAC,UAAU,GAAW,EAAE;EAE0B;EAEjDC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EACpB;;EAEAA,SAASA,CAAA;IACP,IAAI,CAACJ,YAAY,CAACI,SAAS,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MAC/C,IAAI,CAACL,MAAM,GAAGK,IAAI,CAAC,CAAC;IACtB,CAAC,CAAC;EACJ;;EACAC,aAAaA,CAACC,IAAY;IACxB,QAAQA,IAAI;MACV,KAAK,CAAC;QACJ,OAAO,OAAO;MAChB,KAAK,CAAC;QACJ,OAAO,QAAQ;MACjB;QACE,OAAO,MAAM;;EAEnB;EACAC,YAAYA,CAAA;IACV;IACA,IAAI,IAAI,CAACP,UAAU,EAAE;MACnB,IAAI,CAACD,MAAM,GAAG,IAAI,CAACA,MAAM,CAACS,MAAM,CAAEC,KAAK,IACrCA,KAAK,CAACH,IAAI,CAACI,QAAQ,CAAC,IAAI,CAACV,UAAU,CAAC,CACrC;KACF,MAAM;MACL;MACA,IAAI,CAACE,SAAS,EAAE;;EAEpB;CACD;AApCYN,kBAAkB,GAAAe,UAAA,EAL9BhB,SAAS,CAAC;EACTiB,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWlB,kBAAkB,CAoC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}